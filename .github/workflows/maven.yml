#name: Maven, Docker
#
#on:
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Set up JDK 12
#      uses: actions/setup-java@v1
#      with:
#        java-version: 12
#
#    - uses: actions/cache@v1
#      with:
#        path: ~/.m2/repository
#        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#        restore-keys: |
#          ${{ runner.os }}-maven-
#
#    - name: Build using Maven
#      run: mvn -B clean package
#
#    - name: Save result
#      uses: actions/upload-artifact@v1
#      with:
#        name: build-result
#        path: target
#
#  package-jar:
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Load result
#      uses: actions/download-artifact@v1
#      with:
#        name: build-result
#        path: target
#
#    - name: Set up JDK 12
#      uses: actions/setup-java@v1
#      with:
#        java-version: 12
#
#    - uses: actions/cache@v1
#      with:
#        path: ~/.m2/repository
#        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#        restore-keys: |
#          ${{ runner.os }}-maven-
#
#    - name: Publish jar to GitHub Packages
#      run: mvn -B deploy
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#  package-container:
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Load result
#      uses: actions/download-artifact@v1
#      with:
#        name: build-result
#        path: target
#
#    - name: Build and publish Docker image to GitHub Packages
#      env:
#        DOCKER_IMAGE_TARGET: docker.pkg.github.com/arothuis-hu/notes-boot/notes-boot
#        GITHUB_PACKAGE_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      run: |
#        docker build --tag ${DOCKER_IMAGE_TARGET} .
#        echo "${GITHUB_PACKAGE_REGISTRY_TOKEN}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
#        docker push ${DOCKER_IMAGE_TARGET}
#
#  deploy-heroku:
#    runs-on: ubuntu-latest
#    needs: package-container
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Deploy Docker image to Heroku
#      env:
#        GITHUB_PACKAGE_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        DOCKER_IMAGE_SOURCE: docker.pkg.github.com/arothuis-hu/notes-boot/notes-boot
#        DOCKER_IMAGE_TARGET: registry.heroku.com/arothuis-notes-boot/web
#        HEROKU_API_KEY: ${{ secrets.HEROKU_TOKEN }}
#      run: |
#        echo "${GITHUB_PACKAGE_REGISTRY_TOKEN}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
#        docker pull ${DOCKER_IMAGE_SOURCE}
#        echo "${HEROKU_API_KEY}" | docker login registry.heroku.com -u=_ --password-stdin
#        docker tag ${DOCKER_IMAGE_SOURCE} ${DOCKER_IMAGE_TARGET}
#        docker push ${DOCKER_IMAGE_TARGET}
#
#    - name: Heroku release
#      env:
#        HEROKU_API_KEY: ${{ secrets.HEROKU_TOKEN }}
#      run: |
#        curl https://cli-assets.heroku.com/install.sh | sh
#        heroku stack:set -a arothuis-notes-boot container
#        heroku container:release web --app arothuis-notes-boot
#
#
